import os, glob
if ARGUMENTS.get('debug', 0):
  env = Environment(ENV = {'PATH' : os.environ['PATH']}, CCFLAGS = '-g')
else:
  env = Environment(ENV = {'PATH' : os.environ['PATH']})


# compile the avcodec example program (this grabs frames from an h264 movie, and
# churns out the individual frames)
env.Program(
  'avcodec_sample',
  'avcodec_sample.cpp',
  LIBS = [
    'avformat',
    'avcodec',
    'avutil',
    'swscale',
    'z'
  ],
  LIBPATH = "/opt/local/lib",
  CPPPATH = "/opt/local/include"
)

# compile the lucas-kanade example application.  It calls into OpenCV for the
# actual implementation of the algorithm.
env.Program(
  'lkopencv',
  'lucas_kanade_opencv.cpp',
  LIBS = [
    'm',
    'cv',
    'highgui',
    'cvaux',
    'stdc++',
    'cxcore'
  ],
  LIBPATH = "/usr/lib",
  CPPPATH = "/usr/include/opencv",
  CCFLAGS = "-arch i386",
  LINKFLAGS = "-arch i386"
)


# compile some example code that writes out avi files using opencv:
env.Program(
  'movie_writer_opencv',
  'movie_writer_opencv.cpp',
  LIBS = [
    'm',
    'cv',
    'highgui',
    'cvaux',
    'stdc++',
    'cxcore'
  ],
  LIBPATH = "/usr/lib",
  CPPPATH = "/usr/include/opencv",
  CCFLAGS = "-arch i386",
  LINKFLAGS = "-arch i386"
)

# combined code:

env.Program(
  'bbs_registration',
  [
  'bbs_registration.cpp',
  'CAR_scoring_function.c',
  'GREEN_scoring_function.c',
  'ROAD_scoring_function.c',
  ] + glob.glob("./libs/*.a"),
  LIBS = [
    'm',
    'stdc++',
    'objc',
    'cxcore',
    'libcvaux',
    'libcv'
  ],
  FRAMEWORKS = [
    'CoreFoundation',
    'QuartzCore',
    'Cocoa',
    'QTKit',
    'ApplicationServices',
    'Foundation',
    'CoreVideo',
    'AppKit'
  ],
  LIBPATH = ["/usr/local/lib", "./dynlibs"],
  CPPPATH = ["/usr/local/include", "/usr/include/opencv", "/opt/local/include"],
  CCFLAGS = "-m64",
  LINKFLAGS = "-m64"
)
