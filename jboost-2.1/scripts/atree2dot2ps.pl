#!/usr/bin/perl
# atree2dot2ps.pl file threshold
# read a tree file generated by atree create a dot file and then an
# image file. The trehold is used to specify the number of iterations
# after which we want the tree, lines whose index is larger than the
# threshold are ignored.

use Getopt::Long;


sub print_usage
{
    $exit_code = $_[0];
    print "$0 usage: \n";
    print "\t -i (--info) file.info \t File containing runtime information (required) \n";
    print "\t -s (--spec) file.spec \t Spec file (optional, will default to spec file in info file) \n";
    print "\t -t (--tree) file.tree \t File containing the ADTree in text format (required) \n";
    print "\t -d (--dir)  directory \t Directory to use (optional, defaults to '.') \n";
    print "\t -l (--labels)         \t Flip the labels (-1 becomes +1) (optional)\n";
    print "\t --truncate            \t Truncate threshold values to increase readability\n";
    print "\t --threshold num       \t A given depth to stop the tree from becoming too large. (optional) \n";
    print "\t -h (--help)           \t Print this usage information \n";
    print "\n";
    print "This script uses the 'dot' program, which must be in your path.\n";
    print "'dot' is part of the graphviz package from AT&T research.\n";
    exit($exit_code);
}


$dirname = ".";
$infofilename = "";
$specfilename = "";
$filename = "";
$threshold = 0;
$gethelp = 0;
$fliplabels = 0;
$truncatesplits = 0;

if ( @ARGV > 0 ) {
    GetOptions ('i|info=s' => \$infofilename,
		's|spec=s' => \$specfilename,
		't|tree=s' => \$filename,
		'd|dir=s' => \$dirname,
		'h|help' => \$gethelp,
		'l|labels' => \$fliplabels,
		'truncate' => \$truncatesplits,
		'threshold=i' => \$threshold)
    or print_usage(2);
}

if($gethelp){
    print_usage(0);
}

print "Directory: '$dirname'\n";
print "Info File: '$infofilename'\n";
print "Tree File: '$filename'\n";



if (($filename eq "") || ($infofilename eq"")) {
    print "Must specify both a tree (-t *.tree) and an info file (-i *.info). \n";
    print_usage(2);
}



#opening info file
open(INFO,"$dirname/$infofilename") || die "could not open file $dirname/$infofilename \n";

$graphtitle = <INFO>;		# use command line as title for graphs
chop $graphtitle;
$graphtitle =~ s/^.*Command line\:\s*//; # remove <CR> from the end of the line
$graphtitle .= " | ";


if ($specfilename eq "") {
    while ($line = <INFO>) {
	if ($line =~ /specFilename = (.*).*/) {
	    $specfilename = $1;
	}
    }
}

print "Spec File: '$specfilename'\n";
open(SPEC, "$dirname/$specfilename") || die "could not open spec file: $specFilename\n";

while ($line = <SPEC>) {
    if ($line =~ /labels.*\((.*)\).*/) {
	@labels = split(/,/, $1);
    }
}
print "Labels: @labels\n";
$numLabels = @labels;

$filename= $dirname . "/" . $filename;

open(FILE,$filename) || die "could not open $file \n";
$filename =~ s/.output.tree//;
open(OUT,">$filename.$threshold.dot");

print "Running atree2dot2ps.pl ".join(" ",@ARGV).".\n";
print "Generating $filename.$threshold.{dot,ps,pdf}\n";

print OUT "digraph G \{\n";
print OUT "size=\"10,7.5\";\n";
#print OUT "orientation=\"landscape\";\n";
print OUT "rotate=\"90\";\n";
print OUT "ratio=auto;\n";
print OUT "center=TRUE;\n";

$last_iter = 0;
while($line = <FILE>) {
    if($line =~ /^(\d*)\t\[([^\]]*)\] Splitter = (.*)$/) {
	$type = "splitter";
	$iteration = $1;
	$index = $2;
	$label = $3;
	if ($label =~ s/(EqualitySplit:\s*\d+\s*|InequalitySplitter\.)//) {
	    $splitType = $1;
	}
	if ($splitType =~ /InequalitySplitter/ && $truncatesplits) {
	    $label =~ /(.*)(<|>)\s*(-*[0-9]*(\.)?[0-9]?[0-9]?[0-9]?).*/;
	    $var = $1;
            $ineq = $2; 
            $val = $3;
	    #print "$type, $index, $var, $ineq, $val, $splitType\n";
	    $label = "$var $ineq $val"
	} else {
	    #print "line: $line\n";
	    #print "$type, $index, $label, $splitType\n";
	}
    } elsif($line =~ /^(\d*)\t\[([^\]]*)\].*prediction.*= (.*)/) {
	$type = "predictor";
	$iteration = $1;
	$index = $2;
	$label = $3;
	#print "label: $label\n";
	$predType = $3;
	#print "predType: $predType\n";
	if ($predType =~ /MultiPrediction/) {
	    $label = "";
	    for ($i=0; $i<$numLabels; $i++) {
		$line = <FILE>;
		if ($line =~ /^.*prediction.*= (.*)/) {
		    $pred = $1;
		}
		if ($fliplabels) {
		    $pred = -$pred;
		}
		$label .= @labels[$i] . ": " . $pred . "\\n";
	    }
	    #print "label: $label \n";
	} else {
	    $label =~ s/(\d\.\d{3}).*/$1/;
	    #print "label: $label\n";
	    if($fliplabels) {
		$label = -$label;
	    }
	}
	#print "$type, $predType, $index, $label\n";
    } else {
	#print "Line ignored: $line";
	chop $line;
	next;
    }

    if($threshold == 0 || $iteration <= $threshold) { 
	if($last_iter < $iteration) { $last_iter = $iteration;}
	$index =~ s/[:.]/_/g;
	if($index =~ /^(.*)_(\d*)$/) {
	    $parent = $1;
	    $child_no = $2;
	} else {
	    $parent = "";
	}
	if($type eq "splitter") {
	    print OUT "$index [shape = box, label = \"$iteration:  $label \", color = red];\n";
	    if ($parent ne "") {
		print OUT "$parent -> $index [style=dotted];\n";
	    }
	} else {
	    print OUT "$index [shape = ellipse, label = \"$label\", color = blue];\n";
	    if ($parent ne "") {
		if($TBL{$parent}==1) {
		    print OUT "$parent -> $index [label=\"n\",color = red];\n";
		} else {
		    print OUT "$parent -> $index [label=\"y\",color = red];\n";
		    $TBL{$parent}=1;
		}
	    }
	}
    }
}

#print OUT "label=\"$graphtitle after $last_iter iterations\";\n";
print OUT "}\n";


close(FILE);
close(OUT);

system("dot -Tpng $filename.$threshold.dot -o $filename.$threshold.png");
system("dot -Tgif $filename.$threshold.dot -o $filename.$threshold.gif");
#system("dot -Tps2 $filename.$threshold.dot -o $filename.$threshold.eps");
system("dot -Tps $filename.$threshold.dot -o $filename.$threshold.ps");
#system("ps2pdf $filename.$threshold.ps");
#system("pstoimg -antialias -aaliastext -density 400 $filename.$threshold.ps");

